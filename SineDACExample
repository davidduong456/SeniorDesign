#include <avr/io.h>
#include <util/delay.h>
#include <math.h>

#define F_CPU 16000000UL  // 16 MHz clock speed
#define SCL_CLOCK 100000L // I2C clock set to 100 kHz
#define MCP4725_ADDR 0x62 // MCP4725 I2C address

const uint16_t sine_lut[100] = {
    2048, 2177, 2306, 2434, 2561, 2687, 2811, 2933, 3053, 3170,
    3284, 3395, 3503, 3607, 3707, 3804, 3896, 3983, 4066, 4144,
    4216, 4283, 4345, 4400, 4449, 4493, 4530, 4560, 4585, 4603,
    4614, 4619, 4618, 4611, 4598, 4578, 4553, 4522, 4486, 4444,
    4398, 4346, 4289, 4227, 4161, 4091, 4016, 3938, 3856, 3770,
    3681, 3589, 3494, 3396, 3296, 3193, 3088, 2982, 2874, 2764,
    2653, 2542, 2430, 2317, 2205, 2093, 1981, 1870, 1760, 1651,
    1543, 1437, 1333, 1232, 1133, 1036, 943, 852, 764, 679,
    598, 521, 447, 377, 311, 249, 191, 138, 89, 45,
    6, 1, 8, 28, 52, 80, 111, 146, 184, 226
};


// I2C Initialization
void I2C_Init(void) {
	// Set the bit rate for 100 kHz I2C
	TWSR = 0x00;  // Prescaler set to 1
	TWBR = ((F_CPU / SCL_CLOCK) - 16) / 2;  // Set bit rate register for 100kHz
}

// I2C Start condition
void I2C_Start(void) {
	TWCR = (1<<TWSTA) | (1<<TWEN) | (1<<TWINT);  // Send start condition
	while (!(TWCR & (1<<TWINT)));  // Wait for transmission to complete
}

// I2C Stop condition
void I2C_Stop(void) {
	TWCR = (1<<TWSTO) | (1<<TWINT) | (1<<TWEN);  // Send stop condition
}

// I2C Write byte
void I2C_Write(uint8_t data) {
	TWDR = data;  // Load data to data register
	TWCR = (1<<TWINT) | (1<<TWEN);  // Start transmission
	while (!(TWCR & (1<<TWINT)));  // Wait for transmission to complete
}

// Send data to MCP4725 DAC
void MCP4725_SetValue(uint16_t value) {
	I2C_Start();
	I2C_Write(MCP4725_ADDR << 1);  // Write address with write bit (0)
	I2C_Write((value >> 8) & 0x0F);  // Send upper data bits (D11-D8)
	I2C_Write(value & 0xFF);  // Send lower data bits (D7-D0)
	I2C_Stop();
}
//-------------------------------------------------------------------------
//            Sine wave Generator using accumlator and look up table
//*
void generate_sine_wave(void){
	uint16_t dacvalue;
	uint16t_t accumulator = 0;
	uint16_t stepsize = 1;
	uint16_t lut_size = sizeof(sine_lut) / sizeof(sine_lut[0]);

	while (1) {
		dacvalue = sine_lut(accumulator);

	        MCP4725_SetValue(dac_value);

		accumulator += stepsize;

		if(accumulator > lut_size) {
			accumulator = 0;
		}

		delay_ms(9);
	}
}
	
*//
//-------------------------------------------------------------------------


//-------------------------------------------------------------------------
//            Sine wave Generator using equation
// time per step = 1/(frequency(hz) x number of steps)

void Generate_Sine_Wave(void) {
	uint16_t dac_value;
	float angle = 0.0;
	float step = 2 * M_PI / 100;  // Divide the sine wave into 100 steps

	while (1) {
		// Calculate the DAC value from the sine function
		dac_value = (uint16_t)(2047 * (sin(angle) + 1));  // Shift sine range to 0-4095
		
		// Send the value to the MCP4725 DAC
		MCP4725_SetValue(dac_value);
		
		// Increment the angle for the next sample
		angle += step;
		if (angle >= 2 * M_PI) {
			angle = 0;  // Reset angle to loop the sine wave
		}

		_delay_ms(9);  // Delay to control the output frequency of the sine wave
	}
}
//-------------------------------------------------------------------------


//-------------------------------------------------------------------------
//            Ramp wave Generator using equation

void Generate_Ramp_Wave(void) {
	uint16_t dac_value = 0;  // Start at 0
	int step_size = 40;  // Step size for the wave
	uint8_t direction = 1;  // 1 for rising, 0 for falling

	while (1) {
		// Send the current DAC value to the MCP4725
		MCP4725_SetValue(dac_value);

		// Adjust DAC value based on the current direction (rising or falling)
		if (direction) {
			dac_value += step_size;  // Increment for rising
			if (dac_value >= 4095) {  // If reached max, start falling
				dac_value = 4095;
				direction = 0;  // Switch to falling
			}
			} else {
			dac_value -= step_size;  // Decrement for falling
			if (dac_value <= 0) {  // If reached min, start rising
				dac_value = 0;
				direction = 1;  // Switch to rising
			}
		}

		_delay_ms(11);  // Adjust delay to control frequency
	}
}
//-------------------------------------------------------------------------


//-------------------------------------------------------------------------
//                       Triangle wave generator

void Generate_Triangle_Wave(void) {
	uint16_t dac_value = 0;  // Start at the minimum value
	int step_size = 40;  // Step size for each increment/decrement
	uint8_t direction = 1;  // 1 means rising, 0 means falling

	while (1) {
		// Send the current DAC value to the MCP4725
		MCP4725_SetValue(dac_value);

		// Adjust DAC value based on the current direction (rising or falling)
		if (direction) {
			dac_value += step_size;  // Increment value while rising
			if (dac_value >= 4094) {  // If the peak is reached, start falling
				direction = 0;  // Switch to falling
			}
			} else {
			dac_value -= step_size;  // Decrement value while falling
			if (dac_value <= 0) {  // If the bottom is reached, start rising
				direction = 1;  // Switch to rising
			}
		}

		_delay_ms(3);  // Adjust delay to control the frequency of the triangle wave
	}
}
//-------------------------------------------------------------------------



//-------------------------------------------------------------------------
//                        Square wave generator

void Generate_Square_Wave(void) {
	uint16_t dac_value_high = 4095;  // High value for the square wave (maximum for a 12-bit DAC)
	uint16_t dac_value_low = 0;      // Low value for the square wave (minimum)
	uint16_t dac_value = dac_value_high;  // Start with the high value

	while (1) {
		// Send the current DAC value to the MCP4725
		MCP4725_SetValue(dac_value);

		// Toggle between high and low values
		if (dac_value == dac_value_high) {
			dac_value = dac_value_low;  // Switch to low value
			} else {
			dac_value = dac_value_high;  // Switch to high value
		}

		_delay_ms(1575);  // Adjust delay to control the frequency of the square wave
	}
}
//-------------------------------------------------------------------------


//-------------------------------------------------------------------------
//                      Testing values function

void Test_MCP4725(void) {
	MCP4725_SetValue(1);  // Set to mid-scale value
	while (1);  // Infinite loop to hold the value
}
//-------------------------------------------------------------------------



int main(void) {
	I2C_Init();  // Initialize I2C communication
	//Test_MCP4725();

	//Generate_Sine_Wave();  // Start generating the sine wave
	//Generate_Ramp_Wave();
	//Generate_Triangle_Wave();
	
	Generate_Square_Wave();
	return 0;
}
