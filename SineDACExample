#include <avr/io.h>
#include <util/delay.h>
#include <math.h>

#define F_CPU 16000000UL  // 16 MHz clock speed
#define SCL_CLOCK 100000L // I2C clock set to 100 kHz 
#define MCP4725_ADDR 0x62 // MCP4725 I2C address 
// I2C Initialization
void I2C_Init(void) {
	// Set the bit rate for 100 kHz I2C
	TWSR = 0x00;  // Prescaler set to 1
	TWBR = ((F_CPU / SCL_CLOCK) - 16) / 2;  // Set bit rate register for 100kHz
}

// I2C Start condition
void I2C_Start(void) {
	TWCR = (1<<TWSTA) | (1<<TWEN) | (1<<TWINT);  // Send start condition
	while (!(TWCR & (1<<TWINT)));  // Wait for transmission to complete
}

// I2C Stop condition
void I2C_Stop(void) {
	TWCR = (1<<TWSTO) | (1<<TWINT) | (1<<TWEN);  // Send stop condition
}

// I2C Write byte
void I2C_Write(uint8_t data) {
	TWDR = data;  // Load data to data register
	TWCR = (1<<TWINT) | (1<<TWEN);  // Start transmission
	while (!(TWCR & (1<<TWINT)));  // Wait for transmission to complete
}

// Send data to MCP4725 DAC
void MCP4725_SetValue(uint16_t value) {
	I2C_Start();
	I2C_Write(MCP4725_ADDR << 1);  // Write address with write bit (0)
	I2C_Write((value >> 8) & 0x0F);  // Send upper data bits (D11-D8)
	I2C_Write(value & 0xFF);  // Send lower data bits (D7-D0)
	I2C_Stop();
}

// Generate Sine Wave
void Generate_Sine_Wave(void) {
	uint16_t dac_value;
	float angle = 0.0;
	float step = 2 * M_PI / 100;  // Divide the sine wave into 100 steps

	while (1) {
		// Calculate the DAC value from the sine function
		dac_value = (uint16_t)(2047 * (sin(angle) + 1));  // Shift sine range to 0-4095
		
		// Send the value to the MCP4725 DAC
		MCP4725_SetValue(dac_value);
		
		// Increment the angle for the next sample
		angle += step;
		if (angle >= 2 * M_PI) {
			angle = 0;  // Reset angle to loop the sine wave
		}

		_delay_ms(10);  // Delay to control the output frequency of the sine wave
	}
}

void Test_MCP4725(void) {
	MCP4725_SetValue(1);  // Set to mid-scale value
	while (1);  // Infinite loop to hold the value
}

int main(void) {
	I2C_Init();  // Initialize I2C communication
	    //Test_MCP4725();

	Generate_Sine_Wave();  // Start generating the sine wave
	return 0;
}
