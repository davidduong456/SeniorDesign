
#include <avr/io.h>
#include "liquid_crystal_i2c.h"
#include <util/delay.h>
#include "i2c_master.h"
#include <stdio.h>

#define MCP4725_ADDR 0X62 // MCP4725 DAC address
#define F_CPU 16000000UL

//function prototypes

void MCP4725_SetValue (uint16_t value)
void Generate_Sine_Wave (double amplitude, int frequency);
void Generate_Triangle_Wave (
void Generate_Square_Wave ( 
void 








int main(void) {
    // Initialize I2C and LCD
    i2c_master_init(I2C_SCL_FREQUENCY_400);
    LiquidCrystalDevice_t device = lq_init(0x27, 20, 4, LCD_5x8DOTS);
    lq_turnOnBacklight(&device);  // Turn on the backlight
    
    // Configure buttons
    DDRD &= (1<<2);  // Select button
    DDRD &= (1<<4);  // Up button
    DDRD &= (1<<7);  // Down button
    DDRB &= (1<<0);  // Switch button

    // Variables
    int vol_num = 50;
    int fsm = 0;
    char vol_str[30];
    char freq_str[30];
    char waveform[4][10] = {"Sine", "Square", "Triangle", "Ramp"};
    int waveform_id = 0;
    int frequency[10] = {50, 100, 200, 300, 440, 500, 1000, 2000, 5000, 10000};
    int freq_id = 0; 
    int screen = 0;
    
    // Main loop
    while (1) {
        // Check for AUX mode
        if (PINB & (1 << 0)) {
            if (screen == 0) {
                lq_clear(&device);
                screen = 1; 
            }
            lq_setCursor(&device, 1, 0);
            lq_print(&device, "AUX MODE");
        } else {
            // Handle tone generator mode
            if (screen == 1) {
                lq_clear(&device);
                lq_setCursor(&device, 1, 0);
                lq_print(&device, "TONE GENERATOR MODE");
                _delay_ms(2000);
                lq_clear(&device);
                screen = 0;
            }

            // Update LCD with Amplitude, Frequency, and Waveform
            lq_setCursor(&device, 0, 0);
            lq_print(&device, "Amplitude");
            lq_setCursor(&device, 1, 0);
            lq_print(&device, "Frequency");
            lq_setCursor(&device, 2, 0);
            lq_print(&device, "Waveform");

            // Display Amplitude
            lq_setCursor(&device, 0, 17);
            sprintf(vol_str, "%d", vol_num);
            lq_print(&device, vol_str);
            if (vol_num < 10) {
                lq_print(&device, "  ");
            } else if (vol_num < 100) {
                lq_print(&device, " ");
            }

            // Display Frequency
            lq_setCursor(&device, 1, 18);
            lq_print(&device, "Hz");

            lq_setCursor(&device, 1, 13);
            switch(freq_id) {
                case 0:
                    lq_print(&device, "   ");
                    break;
                case 1: case 2: case 3: case 4: case 5:
                    lq_print(&device, "  ");
                    break;
                case 6: case 7: case 8:
                    lq_print(&device, " ");
                    break;
            }
            sprintf(freq_str, "%d", frequency[freq_id]);
            lq_print(&device, freq_str);

            // Display Waveform
            lq_setCursor(&device, 2, 12);
            switch(waveform_id) {
                case 0:  // Sine
                    lq_print(&device, "    ");
                    break;
                case 1:  // Square
                    lq_print(&device, "  ");
                    break;
                case 3:  // Ramp
                    lq_print(&device, "    ");
                    break;
            }
            lq_print(&device, waveform[waveform_id]);

            // FSM for button inputs
            switch(fsm) {
                case 0:
                    lq_setCursor(&device, 0, 9);
                    lq_print(&device, "<");
                    lq_setCursor(&device, 1, 9);
                    lq_print(&device, " ");
                    lq_setCursor(&device, 2, 8);
                    lq_print(&device, " ");
                    lq_setCursor(&device, 0, 16);
                    lq_print(&device, " ");
                    lq_setCursor(&device, 3, 0);
                    lq_print(&device, "Up    Down    Select");

                    if (PIND & (1 << 2)) {
                        while(PIND & (1 << 2)) {}
                        fsm = 3;
                    }
                    if (PIND & (1 << 4)) {
                        while(PIND & (1 << 4)) {}
                        fsm = 2;
                    }
                    if (PIND & (1 << 7)) {
                        while(PIND & (1 << 7)) {}
                        fsm = 1;
                    }
                    break;
                
                case 1:
                    lq_setCursor(&device, 0, 9);
                    lq_print(&device, " ");
                    lq_setCursor(&device, 1, 9);
                    lq_print(&device, "<");
                    lq_setCursor(&device, 2, 8);
                    lq_print(&device, " ");
                    lq_setCursor(&device, 1, 12);
                    lq_print(&device, " ");
                    lq_setCursor(&device, 3, 0);
                    lq_print(&device, "Up    Down    Select");

                    if (PIND & (1 << 2)) {
                        while(PIND & (1 << 2)) {}
                        fsm = 4;
                    }
                    if (PIND & (1 << 4)) {
                        while(PIND & (1 << 4)) {}
                        fsm = 0;
                    }
                    if (PIND & (1 << 7)) {
                        while(PIND & (1 << 7)) {}
                        fsm = 2;
                    }
                    break;
                
                case 2:
                    lq_setCursor(&device, 0, 9);
                    lq_print(&device, " ");
                    lq_setCursor(&device, 1, 9);
                    lq_print(&device, " ");
                    lq_setCursor(&device, 2, 8);
                    lq_print(&device, "<");
                    lq_setCursor(&device, 2, 11);
                    lq_print(&device, " ");
                    lq_setCursor(&device, 3, 0);
                    lq_print(&device, "Up    Down    Select");

                    if (PIND & (1 << 2)) {
                        while(PIND & (1 << 2)) {}
                        fsm = 5;
                    }
                    if (PIND & (1 << 4)) {
                        while(PIND & (1 << 4)) {}
                        fsm = 1;
                    }
                    if (PIND & (1 << 7)) {
                        while(PIND & (1 << 7)) {}
                        fsm = 0;
                    }
                    break;

                case 3:
                    lq_setCursor(&device, 0, 16);
                    lq_print(&device, ">");
                    lq_setCursor(&device, 0, 9);
                    lq_print(&device, " ");
                    lq_setCursor(&device, 3, 0);
                    lq_print(&device, "Up    Down    Back");

                    if (PIND & (1 << 4)) {
                        while(PIND & (1 << 4) && vol_num < 100) {
                            vol_num += 1;
                            lq_setCursor(&device, 0, 17);
                            sprintf(vol_str, "%d", vol_num);
                            lq_print(&device, vol_str);

                            if (vol_num < 10) {
                                lq_print(&device, "  ");
                            } else if (vol_num < 100) {
                                lq_print(&device, " ");
                            }
                            _delay_ms(250);
                        }
                    }

                    if (PIND & (1 << 7)) {
                        while(PIND & (1 << 7) && vol_num > 0) {
                            vol_num -= 1;
                            lq_setCursor(&device, 0, 17);
                            sprintf(vol_str, "%d", vol_num);
                            lq_print(&device, vol_str);

                            if (vol_num < 10) {
                                lq_print(&device, "  ");
                            } else if (vol_num < 100) {
                                lq_print(&device, " ");
                            }
                            _delay_ms(250);
                        }
                    }

                    if (PIND & (1 << 2)) {
                        while(PIND & (1 << 2)) {}
                        fsm = 0;
                    }
                    break;
                
                case 4:
                    lq_setCursor(&device, 1, 12);
                    lq_print(&device, ">");
                    lq_setCursor(&device, 1, 9);
                    lq_print(&device, " ");
                    lq_setCursor(&device, 3, 0);
                    lq_print(&device, "Up    Down    Back");

                    if (PIND & (1 << 4)) {
                        while(PIND & (1 << 4)) {}
                        if (freq_id == 9) {
                            freq_id = 0;
                        } else {
                            freq_id += 1;
                        }
                    }

                    if (PIND & (1 << 7)) {
                        while(PIND & (1 << 7)) {}
                        if (freq_id == 0) {
                            freq_id = 9;
                        } else {
                            freq_id -= 1;
                        }
                    }

                    if (PIND & (1 << 2)) {
                        while(PIND & (1 << 2)) {}
                        fsm = 1;
                    }
                    break;

                case 5:
                    lq_setCursor(&device, 2, 11);
                    lq_print(&device, ">");
                    lq_setCursor(&device, 2, 8);
                    lq_print(&device, " ");
                    lq_setCursor(&device, 3, 0);
                    lq_print(&device, "Up    Down    Back");

                    if (PIND & (1 << 4)) {
                        while(PIND & (1 << 4)) {}
                        if (waveform_id == 3) {
                            waveform_id = 0;
                        } else {
                            waveform_id += 1;
                        }
                    }

                    if (PIND & (1 << 7)) {
                        while(PIND & (1 << 7)) {}
                        if (waveform_id == 0) {
                            waveform_id = 3;
                        } else {
                            waveform_id -= 1;
                        }
                    }

                    if (PIND & (1 << 2)) {
                        while(PIND & (1 << 2)) {}
                        fsm = 2;
                    }
                    break;
            }
        }
    }
}
